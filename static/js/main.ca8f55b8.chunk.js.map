{"version":3,"sources":["logo.svg","components/card/Card.component.jsx","components/card-list/card-list.component.js","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","src","monster","id","name","email","type","htmlFor","CardList","Array","isArray","monsters","map","index","key","SearchBox","placeholder","onChange","handleChange","App","onSearchChange","e","setState","searchField","target","value","state","action","this","filteredMonsters","fetch","then","response","json","users","newData","Object","assign","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4IAAAA,EAAOC,QAAU,IAA0B,kC,+NCM9BC,G,8BAAO,SAAAC,GAChB,OACI,yBAAMC,UAAU,kBACZ,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eACtB,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,OAClB,4BAAKP,EAAMI,QAAQC,IACnB,2BAAOG,KAAK,WAAWP,UAAU,SAASK,KAAI,WAAMN,EAAMI,QAAQC,IAAMA,GAAE,WAAML,EAAMI,QAAQC,MAC1F,2BAAOI,QAAO,WAAMT,EAAMI,QAAQC,KAAlC,aCRHK,G,MAAW,SAAAV,GAAK,OACzB,yBAAKC,UAAU,cACwB,IAAlCU,MAAMC,QAAQZ,EAAMa,UAAsBb,EAAMa,SAASC,KAAI,SAACV,EAASW,GACpE,GAAuB,kBAAZX,EAEP,OAAQ,kBAAC,EAAD,CAAMY,IAAKD,EAAOX,QAASA,OAEtC,QCXAa,G,MAAY,SAAAjB,GAAK,OAC1B,2BACAC,UAAU,aACVO,KAAK,SACLU,YAAclB,EAAMkB,YACpBC,SAAUnB,EAAMoB,iBCuELC,E,YApEb,aAAe,IAAD,8BACZ,+CA0CFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CACZC,YAAaF,EAAEG,OAAOC,SA3CxB,EAAKC,MAAQ,CACXf,SAAU,CACR,CACEP,KAAM,eACND,GAAI,QAEN,CACEC,KAAM,UACND,GAAI,QAEN,CACEC,KAAM,SACND,GAAI,SAGRoB,YAAa,GACbI,QAAQ,GAlBE,E,gFAsBKD,M,0CAMjBE,KAAKC,qB,yCAIc,IAAD,OAElBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,IACTvB,EAAY,EAAKe,MAAjBf,SACDwB,EAAUC,OAAOC,OAAO,CAAC1B,SAASA,GAAW,CAACA,SAAUuB,IAC5D,EAAKZ,SAASa,Q,+BAUR,IAAD,EAEuBP,KAAKF,MAA9Bf,EAFE,EAEFA,SAAUY,EAFR,EAEQA,YAETM,EAAoBlB,EAAS2B,QAAO,SAAApC,GACzC,OAAQA,EAAQE,KAAKmC,cAAcC,SAASjB,EAAYgB,kBAGzD,OAAQ,yBAAKxC,UAAU,OACrB,gDAIA,kBAAC,EAAD,CAAWiB,YAAY,iBAAiBE,aAAcU,KAAKR,iBAC3D,kBAAC,EAAD,CAAUT,SAAUkB,S,GAjERY,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ca8f55b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nimport './form-modern.css';\r\n\r\nexport const Card = props =>{\r\n    return  (\r\n        <div  className='card-container'>\r\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2`} />\r\n            <h2>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n            <h1>{props.monster.id}</h1>\r\n            <input type=\"checkbox\" className=\"switch\" name={`s${props.monster.id}`} id={`s${props.monster.id}`} />\r\n                <label htmlFor={`s${props.monster.id}`}>Switch</label>\r\n        </div>\r\n    )\r\n};","import React, {Component} from 'react';\r\nimport { Card } from '../card/Card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\n\r\nexport const CardList = props => (\r\n    <div className='card-list'>{\r\n        (Array.isArray(props.monsters) === true) ? props.monsters.map((monster, index) => {\r\n            if (typeof monster === 'object') {\r\n                \r\n                return (<Card key={index} monster={monster} />)\r\n            }\r\n        }) : null\r\n        }\r\n    </div>\r\n)","import React, {Component} from 'react';\r\nimport './search-box.styles.css';\r\nexport const SearchBox = props => (\r\n    <input \r\n    className='search-box'\r\n    type='search'\r\n    placeholder= {props.placeholder}\r\n    onChange={props.handleChange}\r\n    />\r\n);","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './assets/css/style.css';\n\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component.jsx';\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      monsters: [\n        {\n          name: \"Frankenstein\",\n          id: \"asc1\"\n        },\n        {\n          name: \"Dracula\",\n          id: \"asc2\"\n        },\n        {\n          name: \"Zombie\",\n          id: \"as1w\"\n        },\n      ],\n      searchField: '',\n      action: false,\n    };\n  }\n\n  componentDidUpdate(state) {\n    // console.log(this.state)\n  }\n\n  componentDidMount() {\n\n    this.filteredMonsters ()\n    \n  }\n\n  filteredMonsters () {\n\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => {\n      let {monsters} = this.state;\n      var newData = Object.assign({monsters:monsters}, {monsters: users});\n      this.setState(newData);\n    }); \n  }\n\n  onSearchChange = (e) => {\n    this.setState({\n      searchField: e.target.value\n    });\n  }\n\n  render() {\n\n    let {monsters, searchField} = this.state;\n    \n    const filteredMonsters  = monsters.filter(monster => {\n     return  monster.name.toLowerCase().includes(searchField.toLowerCase())\n    });\n    \n    return (<div className='App'>\n      <h1>\n        Monsters Rolodex\n      </h1>\n\n      <SearchBox placeholder='search monster' handleChange={this.onSearchChange}/>\n      <CardList monsters={filteredMonsters}/>\n    </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}